/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    tapping-term-ms = <201>;
    flavor = "tap-preferred";
 };
&sk {
     release-after-ms = <2000>;
     quick-release;
 };
 
/* Layers */
#define AL1 0
#define AL2 1
#define SM1 2
#define SM2 3
#define NUM 4
#define SYS 5
#define BT 6
#define FUN 7
#define AL2U 8
/ { 
    combos {
        compatible = "zmk,combos";
        combo_sys {
            timeout-ms = <30>;
            key-positions = <6 7 8>;
            bindings = <&to SYS>;
        };
        combo_caps {
            timeout-ms = <30>;
            key-positions = <16 17 18>;
            bindings = <&caps_word>;
        };
        combo_num {
            timeout-ms = <30>;
            key-positions = <1 2 3>;
            bindings = <&to NUM>;
        };
        combo_bt  {
            timeout-ms = <10>;
            key-positions = <17 18>;
            bindings = <&to BT>;
            layers = <SM1>;
        };
        combo_fun  {
            timeout-ms = <10>;
            key-positions = <11 12>;
            bindings = <&to FUN>;
            layers = <AL1>;
        };

        lclk {
			timeout-ms = <20>;
			key-positions = <16 17>;
			bindings = <&mkp LCLK>;
			layers = <SYS>;
		};
		rclk {
			timeout-ms = <20>;
			key-positions = <6 7>;
			bindings = <&mkp RCLK>;
			layers = <SYS>;
		};
		bksp {
			timeout-ms = <50>;
			key-positions = <7 8>;
			bindings = <&kp BKSP>;
			layers = <AL1 AL2 AL2U>;
		};
		ret {
			timeout-ms = <50>;
			key-positions = <17 18>;
			bindings = <&kp RET>;
			layers = <AL1 AL2 AL2U>;
		};
		tab {
			timeout-ms = <50>;
			key-positions = <11 12>;
			bindings = <&kp TAB>;
			layers = <AL1 AL2 AL2U>;
		};
		esc {
			timeout-ms = <50>;
			key-positions = <1 2>;
			bindings = <&kp ESC>;
			layers = <AL1 AL2 AL2U>;
		};
		number_8 {
			timeout-ms = <200>;
			key-positions = <7 8>;
			bindings = <&kp N8>;
			layers = <NUM>;
		};
		number_0 {
			timeout-ms = <200>;
			key-positions = <17 18>;
			bindings = <&kp N0>;
			layers = <NUM>;
		};
        number_7 {
			timeout-ms = <200>;
			key-positions = <6 7>;
			bindings = <&kp N7>;
			layers = <NUM>;
		};
		number_9 {
			timeout-ms = <200>;
			key-positions = <16 17>;
			bindings = <&kp N9>;
			layers = <NUM>;
		};

    };

    behaviors {
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_L";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        //     hold-trigger-key-positions = <3 4 5 10 11 12 13 14>; // right hand
            hold-trigger-key-positions = <6 7 8 16 17 18 19 30>; // right hand
        };
        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_R";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        // hold-trigger-key-positions = <0 1 2 6 7 8 9>; // left hand
            hold-trigger-key-positions = < 1 2 3 10 11 12 13>; // left hand
        };
        sr: shift_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&to>;
        retro-tap;
        };
        hl_l: homerow_layers_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_L";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        // hold-trigger-key-positions = <3 4 5 10 11 12 13 14>; // right hand
            hold-trigger-key-positions = <6 7 8 16 17 18 19 30>; // right hand
        };
        hl_r: homerow_layers_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_R";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        // hold-trigger-key-positions = <0 1 2 6 7 8 9>; // left hand
            hold-trigger-key-positions = < 1 2 3 10 11 12 13>; // left hand
        };
    td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
   	alpha2macro: behavior_macro_1 {
			compatible = "zmk,behavior-macro";
			label = "MACRO1";
			#binding-cells = <0>;
			bindings = < &sl AL2 >;
		};
	caps_alpha2macro: behavior_macro_2 {
			compatible = "zmk,behavior-macro";
			label = "MACRO2";
			#binding-cells = <0>;
			bindings = < &sl AL2U >;
		};
  };

//                  0       1       2                   3       4           5
//          6       7       8       9                   10      11          12          13
//                          14      15                  16      17

//                  0       1       2      3     4	    	5	6	7	8	9
//          	   10      11       12     13	14		15	16	17	18	19
//                 20	   21	    22	   23	24              25	26	27	28	29
//                  					   30	31		32	33
       keymap {
                compatible = "zmk,keymap";
                
                alpha1 {
                label = "Base";
        bindings = <
            &trans     &hm_l LCTL L    &hm_l LALT G    &hm_l LGUI D	&trans          &trans &hm_r RGUI H    &hm_r LALT U        &hm_r RCTL O	&trans
            &hl_l NUM I     &hl_l SM2 S     &hl_l SM1 R     &hl_l SYS T	&trans		&trans	&hl_r SYS N     &hl_r SM1 E         &hl_r SM2 A     &hl_r NUM C
	    &trans	&trans	&trans	&trans	&trans                			&trans	&trans	&trans	&trans	&trans 
                                             &mt LC(LS(LALT)) SPC        &sk LSHIFT                  &key_repeat  &sl AL2
        >;
        };
                alpha2 {
                label = "Al2";
        bindings = <
              &trans      &kp V       &kp W               &kp M &trans            &trans  &kp F       &kp SQT         &kp Z	&trans 
        &kp Q       &kp J       &kp P               &kp K &trans            &trans  &kp B       &td COMMA DOT    &kp X       &kp Y
	    &trans	&trans	&trans	&trans	&trans                			&trans	&trans	&trans	&trans	&trans 
                                &kp SPC             &sr LSHIFT AL1      &trans      &sl AL2U
        >;
        };

                sym1 {
                label = "Code";
        bindings = <
                  &trans  &kp EXCL	&kp ATSN	&kp HASH &trans                    &trans  &kp AMPS		&kp STAR		&kp QMARK &trans
        &kp GRAVE	&kp DLLR	&kp PRCNT	&kp CARET &trans                   &trans  &kp UNDER		&kp BSLH		&kp PIPE &kp TILDE
	    &trans	&trans	&trans	&trans	&trans                			&trans	&trans	&trans	&trans	&trans 
                                &trans      &sr LSHIFT AL1                 &kp RALT        &kp RGUI
        >;
        };
        sym2 {
        label = "Punct";
        bindings = <
                 &trans   &trans &kp LT	&kp GT &trans             &trans  &kp LPAR	&kp RPAR    &kp LBRC	&trans	
        &kp SEMI    &kp PRCNT   &kp TILDE	&kp UNDER &trans          &trans  &kp LBKT	&kp RBKT	&kp RBRC    &trans
	    &trans	&trans	&trans	&trans	&trans                			&trans	&trans	&trans	&trans	&trans 
                                &trans          &trans            &trans    &kp RGUI

        >;
        };

        num {
        label = "Num";
        bindings = <
                        &trans  &hm_l LCTL DOT	&hm_l LALT COMMA	&hm_l LGUI SEMI &trans    &trans  &hm_r RGUI N1	&hm_r RALT N2	&hm_r RCTL N3	&trans
        &kp SLASH	&kp MINUS		&kp PLUS			&kp COLON &trans           &trans  &kp N4			&kp N5			&kp N6		&kp EQUAL
	    &trans	&trans	&trans	&trans	&trans                			&trans	&trans	&trans	&trans	&trans 
                                              &kp EQUAL          &sr LSHIFT AL1      &kp RCTL        &kp RGUI
        >;
        };

        sys {
        label = "Nav";
        bindings = <
                          &trans  &kp ESC        &kp LG(LS(LBKT))    &kp LG(LS(RBKT)) &trans      &trans  &td LG(V) LG(C)     &td PG_UP UP    &kp BKSP	&trans
        &td LG(GRAVE) TAB   &kp DEL        &td HOME LG(LBKT)   &td END LG(RBKT) &trans      &trans  &kp LEFT            &td PG_DN DOWN  &td  LG(LS(N5)) RIGHT   &kp RET
	    &trans	&trans	&trans	&trans	&trans                			&trans	&trans	&trans	&trans	&trans 
                                           &kp LCTL            &sr LSHIFT AL1           &kp RALT            &kp RGUI
        >;
        };

        bt {
        label = "BT";
        bindings = <
                &trans  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2 &trans         &trans &bt BT_SEL 3     &bt BT_SEL 4   &trans	&trans	
        &trans    &trans          &trans        &bootloader &trans         &trans  &bootloader      &trans         &trans &bt BT_CLR
	    &trans	&trans	&trans	&trans	&trans                			&trans	&trans	&trans	&trans	&trans 
                                  &none         &to AL1                &none     &none
        >;
        };
        fun {
        label = "Fn";
            bindings = <
                   &trans  &kp F11   &kp F10   &kp F1 &trans        &trans  &kp F2   &kp F3   &kp F4	&trans	
     &kp C_VOL_DN    &kp F12   &kp F5    &kp F6 &trans        &trans  &kp F7   &kp F8   &kp F9  &kp C_VOL_UP
	    &trans	&trans	&trans	&trans	&trans                			&trans	&trans	&trans	&trans	&trans 
                               &none     &to AL1          &none    &kp C_MUTE
                >;
        };
    };
};